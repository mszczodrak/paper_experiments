#!/usr/bin/python
# Create graph for rssi vs delivery ratio vs acks
# Author: Marcin K Szczodrak
# Updated: 5/01/2014

import sys
import os
import numpy as np
import json
import yaml
import operator
from pylab import *

if len(sys.argv) != 6:
	print "usage %s <data_to_import> <testbed_conf> <m> <n> <init_power>\n" % (sys.argv[0])
	exit()

data_module = sys.argv[1]

testbed_conf_module = sys.argv[2].split("/")[-1].split(".")[0]
path_to_testbed_conf_module = "/".join(sys.argv[2].split("/")[:-1])
sys.path.append(path_to_testbed_conf_module)

m = int(float(sys.argv[3]))
n = int(float(sys.argv[4]))
default_tx = int(float(sys.argv[5]))

try:
	testbed_conf = __import__(testbed_conf_module)
except:
	print "failed to import %s\n" % (testbed_conf_module)
	exit()


with open(data_module) as jin:
	content = jin.read()

snapshots = json.loads(content)

if len(snapshots) > 1:
	snapshot = snapshots[-2]
else:
	snapshot = snapshots[-1]


fout = open('power_distribution.h', 'w')

fout.write("#ifndef _FIXED_POWER_DISTRIBUTION_\n")
fout.write("#define _FIXED_POWER_DISTRIBUTION_\n\n")
fout.write("#define FIXED_TX_POWER_NUMBER_OF_NODES\t(%d + 1)\n\n" % (testbed_conf.max_node_id))
fout.write("/* Trace generated by Neighborhood M=%d N=%d Simple */\n\n" % (m, n))

fout.write("uint8_t fixed_tx_power[FIXED_TX_POWER_NUMBER_OF_NODES] = {\n")

for node_id in range(testbed_conf.max_node_id + 1):
	if str(node_id) in snapshot['nodes'].keys():
		radio_tx_power = snapshot['nodes'][str(node_id)]['last_safe_tx_power'][-1]
	else:
		radio_tx_power = default_tx

	#radio_tx_power = default_tx

	if node_id == testbed_conf.max_node_id:
		fout.write("\t%s \t/* ID %03d */" % (radio_tx_power, node_id))
	else:
		fout.write("\t%s, \t/* ID %03d */\n" % (radio_tx_power, node_id))

fout.write("\n};\n\n")
fout.write("#endif")	

fout.close()



