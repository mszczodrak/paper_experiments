# Makefile to open twonet log and send to
# Fennec to process SerialDbgs messages
#
# Author: Marcin K Szczodrak
# Updated: 4/24/2014

THIS_DIR=`pwd`
LOG_RESULT=result.txt

CONF=../../../data/cc2420_conf.py
TESTBED_CONF=../../../data/indriya_conf.py
RSSI_FILE=threshold.rssi
RSSI=$(shell cat threshold.rssi)
N_FILE=N
N=$(shell cat N)
M_FILE=M
M=$(shell cat M)
INIT_POWER_FILE=init.power
INIT_POWER=$(shell cat init.power)

SCRIPT1=../../../../scripts/neighbor_test_starts.py
SCRIPT1_DATA=neighborhood.json

SCRIPT2=../../../../graphs/graph_neighbors_rssi_final_stats.py
SCRIPT2_TITLE="Final Results"
SCRIPT2_GRAPH=graph_Final_Results

SCRIPT3=../../../../graphs/graph_neighborhood_snapshots.py
SCRIPT3_TITLE="Neighborhood Statistics"
SCRIPT3_GRAPH=graph_Neighborhood_Statistics

SCRIPT4=../../../../graphs/graph_good_neighbors_snapshots.py
SCRIPT4_TITLE="Good Neighborhood Statistics"
SCRIPT4_GRAPH=graph_Good_Neighborhood_Statistics

SCRIPT5=../../../../graphs/graph_tx_power_and_etx_snapshots.py
SCRIPT5_TITLE="TX Power and ETX"
SCRIPT5_GRAPH=graph_TX_Power_and_ETX

SCRIPT6=../../../../scripts/setup_digraph_topology.py
SCRIPT6_DATA=graph_data.json

SCRIPT7=../../../../graphs/digraph_power.py
SCRIPT7_TITLE="Power"
SCRIPT7_GRAPH=graph_Power

SCRIPT8=../../../../graphs/digraph_neighbors.py
SCRIPT8_TITLE="Neighborhood"
SCRIPT8_GRAPH=graph_Neighborhood

SCRIPT9=../../../../scripts/neighbors_rssi_power_distribution.py
SCRIPT9_DATA=power_distribution.h

all: $(LOG_RESULT) $(SCRIPT1_DATA) $(SCRIPT9_DATA) $(SCRIPT2_GRAPH) $(SCRIPT3_GRAPH) $(SCRIPT4_GRAPH) $(SCRIPT5_GRAPH) $(SCRIPT6_DATA) $(SCRIPT7_GRAPH) $(SCRIPT8_GRAPH) $(SCRIPT9_DATA)

$(LOG_RESULT): *.zip
	unzip -o *.zip
	$(FENNEC_FOX_LIB)/support/sdk/python/parse_dbgs_indriya.py *.dat > $(LOG_RESULT)

$(SCRIPT1_DATA): $(LOG_RESULT) $(INIT_POWER_FILE)
	$(SCRIPT1) $(LOG_RESULT) $(SCRIPT1_DATA) $(INIT_POWER)

$(SCRIPT2_GRAPH): $(SCRIPT1_DATA) $(CONF) $(RSSI_FILE) $(M_FILE) $(N_FILE)
	$(SCRIPT2) $(SCRIPT1_DATA) $(CONF) $(RSSI) $(M) $(N) $(SCRIPT2_TITLE)

$(SCRIPT3_GRAPH): $(SCRIPT1_DATA) $(CONF)
	$(SCRIPT3) $(SCRIPT1_DATA) $(CONF) $(SCRIPT3_TITLE)

$(SCRIPT4_GRAPH): $(SCRIPT1_DATA) $(CONF)
	$(SCRIPT4) $(SCRIPT1_DATA) $(CONF) $(SCRIPT4_TITLE)

$(SCRIPT5_GRAPH): $(SCRIPT1_DATA) $(CONF) $(ETX_FILE)
	$(SCRIPT5) $(SCRIPT1_DATA) $(CONF) $(ETX) $(SCRIPT5_TITLE)

$(SCRIPT6_DATA): $(SCRIPT1_DATA)
	$(SCRIPT6) $(SCRIPT1_DATA) $(SCRIPT6_DATA)

$(SCRIPT7_GRAPH): $(SCRIPT1_DATA) $(SCRIPT6_DATA) $(CONF)
	$(SCRIPT7) $(SCRIPT1_DATA) $(SCRIPT6_DATA) $(CONF) $(SCRIPT7_TITLE)

$(SCRIPT8_GRAPH): $(SCRIPT1_DATA) $(SCRIPT6_DATA) $(CONF) $(ETX_FILE)
	$(SCRIPT8) $(SCRIPT1_DATA) $(SCRIPT6_DATA) $(CONF) $(SCRIPT8_TITLE)

$(SCRIPT9_DATA): $(SCRIPT1_DATA) $(TESTBED_CONF) $(RSSI_FILE) $(M_FILE) $(N_FILE) $(INIT_POWER_FILE)
	$(SCRIPT9) $(SCRIPT1_DATA) $(TESTBED_CONF) $(RSSI) $(M) $(N) $(INIT_POWER)

clean:
	if [ -f *.dat ]; then rm *dat; fi
	if [ -f *summary ]; then rm -rf *summary; fi
	if [ -f *LOG ]; then rm -rf *LOG; fi
	if [ -f $(LOG_RESULT) ]; then rm $(LOG_RESULT); fi
	if [ -f $(SCRIPT1_DATA) ]; then rm $(SCRIPT1_DATA); fi
	rm -rf graph_*
#	if [ -f $(SCRIPT2_DATA) ]; then rm $(SCRIPT2_DATA); fi
#	if [ -f $(SCRIPT3_DATA) ]; then rm $(SCRIPT3_DATA); fi
#	if [ -f $(SCRIPT4_DATA) ]; then rm $(SCRIPT4_DATA); fi


